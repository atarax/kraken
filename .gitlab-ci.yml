stages:
  - build_binary
  - build_docker_image
  - test
  - deploy

variables:
  DOCKER_REPOSITORY: "atarax"
  GITHUB_REPOSITORY: "atarax"
  BINARY_NAME: "kraken"
  CANDIDATE_IMAGE: "$DOCKER_REPOSITORY/${CI_PROJECT_NAME}:candidate-${CI_COMMIT_SHA}"
  STABLE_IMAGE: "$DOCKER_REPOSITORY/${CI_PROJECT_NAME}:${CI_COMMIT_SHA}"

build_binary:
  image: golang 
  stage: build_binary
  artifacts:
    paths:
      - bin
  script:
    - ln -s $CI_PROJECT_DIR $GOPATH/src/$CI_PROJECT_NAME
    - cd $GOPATH/src/$CI_PROJECT_NAME
    - go get ./...
    - CGO_ENABLED=0 go build -o bin/$BINARY_NAME

build_docker_image:
  stage: build_docker_image
  dependencies:
    - build_binary
  script:
    - docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASSWORD
    - docker build . -t $CANDIDATE_IMAGE
    - docker push $CANDIDATE_IMAGE

test:
  stage: test
  script:
    - docker run $CANDIDATE_IMAGE $BINARY_NAME stress -t "http://google.com" 
    - docker run 
        -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
        -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY 
        $CANDIDATE_IMAGE $BINARY_NAME inventory acquire
    - docker run 
        -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
        -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY 
        $CANDIDATE_IMAGE $BINARY_NAME inventory list
    - docker run 
        -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
        -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY 
        $CANDIDATE_IMAGE $BINARY_NAME inventory destroy 

deploy:
  stage: deploy
  script:
    - docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASSWORD
    - docker tag $CANDIDATE_IMAGE $STABLE_IMAGE
    - docker push $STABLE_IMAGE